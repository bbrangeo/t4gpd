# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
name: Publish t4gpd to PyPI

on: push

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest

    steps:
    # Download the repository into the CI runner.
    - name: Checkout code
      uses: actions/checkout@v4

    # Install and activate the newest available Python 3 release.
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    # Build the dists from source and store them in the dist/ subdir.
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/t4gpd
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install wheel setuptools twine

#     - name: Build package
#       run: python setup.py sdist bdist_wheel

#     - name: Publish to PyPI
#       env:
#         TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#       run: twine upload dist/*

# name: Python package

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
#   release:
#     types: [published]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'
#   pypi-publish:
#     name: upload release to PyPI
#     # runs-on: ubuntu-latest
#     # Specifying a GitHub environment is optional, but strongly encouraged
#     environment: release
#     permissions:
#       # IMPORTANT: this permission is mandatory for trusted publishing
#       id-token: write
#     steps:
#       # retrieve your distributions here
#       - name: Publish package distributions to PyPI
#         uses: pypa/gh-action-pypi-publish@release/v1

#   build:
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         python-version: ["3.9", "3.10", "3.11"]

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v3
#       with:
#         python-version: ${{ matrix.python-version }}
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         python -m pip install flake8 pytest
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#     - name: Lint with flake8
#       run: |
#         # stop the build if there are Python syntax errors or undefined names
#         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#     - name: Test with pytest
#       run: |
#         pytest
